src/common/Game.cpp:186:	// TBAGame->setDisplayTarget(newChar);
src/common/Game.cpp:283:		TBAGame->gameWindow->createPopup("Paused",10,true);
src/common/Game.cpp:288:		TBAGame->gameWindow->deleteFirstToggledPopup();
src/common/KeyFuncs.cpp:32:	TBAGame->gameWindow->textScreen->commandAppend(c);
src/common/KeyFuncs.cpp:40:	TBAGame->gameWindow->textScreen->sendCommand();
src/common/KeyFuncs.cpp:44:	TBAGame->gameWindow->textScreen->swapCommand(i);
src/common/KeyFuncs.cpp:49:	TBAGame->gameWindow->textScreen->deleteLastCharacter();
src/common/KeyFuncs.cpp:57:	if(autocomplete(TBAGame->gameWindow->textScreen->command,TBAGame->commandStrings)) {
src/common/KeyFuncs.cpp:58:		TBAGame->gameWindow->textScreen->commandAppend(' ');
src/common/KeyFuncs.cpp:60:		//TBAGame->gameWindow->textScreen->setCommand(TBAGame->gameWindow->textScreen->command);
src/common/KeyFuncs.cpp:61:		TBAGame->gameWindow->textScreen->setCommandLine();
src/common/KeyFuncs.cpp:67:	TBAGame->togglePause();
src/common/KeyFuncs.cpp:72:	TBAGame->gameWindow->textScreen->content.clear();
src/common/KeyFuncs.cpp:76:	TBAGame->gameWindow->textScreen->setCommand("");
src/common/KeyFuncs.cpp:82:		// if(i != 27) TBAGame->gameWindow->textScreen->commandAppend((char)i);
src/common/KeyFuncs.cpp:85:	// TBAGame->gameWindow->textScreen->commandAppend(clipboard);
src/common/KeyFuncs.cpp:96:	int centerX = 5+TBAGame->gameWindow->mapScreen->x+(TBAGame->gameWindow->mapScreen->w/2)-(TBAGame->gameWindow->mapScreen->charW*(TBAGame->playerChar->x));
src/common/KeyFuncs.cpp:97:	int centerY = 5+TBAGame->gameWindow->mapScreen->y+(TBAGame->gameWindow->mapScreen->h/2)-(TBAGame->gameWindow->mapScreen->charH*(TBAGame->playerChar->y));
src/common/KeyFuncs.cpp:99:	int tileX = std::round(((float)(event.x-centerX))/TBAGame->gameWindow->mapScreen->charW/TBAGame->gameWindow->mapScreen->zoom);
src/common/KeyFuncs.cpp:100:	int tileY = std::round(((float)(event.y-centerY))/TBAGame->gameWindow->mapScreen->charW/TBAGame->gameWindow->mapScreen->zoom);
src/common/KeyFuncs.cpp:104:	Tile* thisTile = TBAGame->gameWorld->getTileAt(tileX,tileY);
src/common/KeyFuncs.cpp:107:		for(int i=TBAGame->gameWindow->screenVector.size()-1;i>=0;i--) {
src/common/KeyFuncs.cpp:108:			if(TBAGame->gameWindow->screenVector.at(i)->enclose(event.x,event.y)) {
src/common/KeyFuncs.cpp:110:				activeScreen = TBAGame->gameWindow->screenVector.size()-1;
src/common/KeyFuncs.cpp:111:				TBAGame->gameWindow->bringToFront(TBAGame->gameWindow->screenVector.at(i));
src/common/KeyFuncs.cpp:117:		if(TBAGame->gameWindow->mapScreen->enclose(event.x,event.y)) {
src/common/KeyFuncs.cpp:123:				if((char*)TBAGame->displayTarget == (char*)testTarget) {
src/common/KeyFuncs.cpp:129:			TBAGame->displayTarget = testTarget;
src/common/KeyFuncs.cpp:132:		// pthread_mutex_lock(&TBAGame->updateLock);
src/common/KeyFuncs.cpp:138:		// pthread_mutex_unlock(&TBAGame->updateLock);
src/common/KeyFuncs.cpp:156:		TBAGame->gameWindow->screenVector.at(activeScreen)->x += event.motion.x-lastMove[0];
src/common/KeyFuncs.cpp:157:		TBAGame->gameWindow->screenVector.at(activeScreen)->y += event.motion.y-lastMove[1];
src/common/KeyFuncs.cpp:162:	int centerX = 5+TBAGame->gameWindow->mapScreen->x+(TBAGame->gameWindow->mapScreen->w/2)-(TBAGame->gameWindow->mapScreen->charW*(TBAGame->playerChar->x));
src/common/KeyFuncs.cpp:163:	int centerY = 5+TBAGame->gameWindow->mapScreen->y+(TBAGame->gameWindow->mapScreen->h/2)-(TBAGame->gameWindow->mapScreen->charH*(TBAGame->playerChar->y));
src/common/KeyFuncs.cpp:165:	int tileX = std::round(((float)(event.motion.x-centerX))/TBAGame->gameWindow->mapScreen->charW/TBAGame->gameWindow->mapScreen->zoom);
src/common/KeyFuncs.cpp:166:	int tileY = std::round(((float)(event.motion.y-centerY))/TBAGame->gameWindow->mapScreen->charW/TBAGame->gameWindow->mapScreen->zoom);
src/common/KeyFuncs.cpp:173:	for(int i=0;i<TBAGame->gameWindow->screenVector.size();i++) {
src/common/KeyFuncs.cpp:174:		if(TBAGame->gameWindow->screenVector.at(i)->enclose(x,y)) {
src/common/KeyFuncs.cpp:186:	TBAGame->gameWindow->screenVector.at(topScreenID)->shiftContentWindow(i);
src/common/KeyFuncs.cpp:191:	TBAGame->gameWindow->textScreen->addContent(s);
src/common/KeyFuncs.cpp:195:	TBAGame->gameWindow->screenVector.at(screenPriority)->x = TBAGame->gameWindow->screenVector.at(screenPriority)->defaultX;
src/common/KeyFuncs.cpp:196:	TBAGame->gameWindow->screenVector.at(screenPriority)->y = TBAGame->gameWindow->screenVector.at(screenPriority)->defaultY;
src/common/KeyFuncs.cpp:200:	int screenCount = TBAGame->gameWindow->screenVector.size();
src/common/KeyFuncs.cpp:213:		if(TBAGame->playerChar->isAlive()) {
src/common/KeyFuncs.cpp:214:			TBAGame->playerChar->addStatus(STATUS_TRAVEL);
src/common/KeyFuncs.cpp:215:			TBAGame->playerChar->removeStatus(STATUS_IDLE);
src/common/KeyFuncs.cpp:216:			TBAGame->playerChar->autoMove = false;
src/common/KeyFuncs.cpp:220:	if(TBAGame->playerChar->isAlive()) {
src/common/KeyFuncs.cpp:221:		TBAGame->playerChar->move_forward = m_forward;
src/common/KeyFuncs.cpp:222:		TBAGame->playerChar->move_back = m_back;
src/common/KeyFuncs.cpp:229:		TBAGame->playerChar->autoMove = false;
src/common/KeyFuncs.cpp:230:		TBAGame->playerChar->viewAng -= 2;
src/common/KeyFuncs.cpp:231:		if(TBAGame->playerChar->viewAng < 0) TBAGame->playerChar->viewAng = 360+TBAGame->playerChar->viewAng;
src/common/KeyFuncs.cpp:232:		TBAGame->playerChar->viewAng = (int)TBAGame->playerChar->viewAng%360;
src/common/KeyFuncs.cpp:235:		TBAGame->playerChar->autoMove = false;
src/common/KeyFuncs.cpp:236:		TBAGame->playerChar->viewAng += 2;
src/common/KeyFuncs.cpp:237:		TBAGame->playerChar->viewAng = (int)TBAGame->playerChar->viewAng%360;
src/common/KeyFuncs.cpp:239:	TBAGame->playerChar->targetAng = TBAGame->playerChar->viewAng;
src/common/KeyFuncs.cpp:253:	/*TBAGame->gameObjects.at(0)->cleanup();
src/common/KeyFuncs.cpp:254:	TBAGame->gameObjects.erase(TBAGame->gameObjects.begin());
src/common/KeyFuncs.cpp:255:	TBAGame->gameObjects.shrink_to_fit();*/
src/common/KeyFuncs.cpp:257:	//TBAGame->popupText(1,"Building is too close to existing settlement");
src/common/KeyFuncs.cpp:260:	//TBAGame->playerChar->setStatus(STATUS_ATTACK);
src/common/KeyFuncs.cpp:263:	//TBAGame->gameWindow->mapScreen->charW-=2;
src/common/KeyFuncs.cpp:264:	//TBAGame->gameWindow->mapScreen->charH-=2;
src/common/KeyFuncs.cpp:267:	//TBAGame->playerChar->maxMoveSpeed++;
src/common/KeyFuncs.cpp:268:	//debug(TBAGame->playerChar->maxMoveSpeed);
src/common/KeyFuncs.cpp:271:	//TBAGame->playerChar->move({200,150});
src/common/KeyFuncs.cpp:273:	//TBAGame->playerChar->isPlayer = false;
src/common/KeyFuncs.cpp:274:	//TBAGame->playerChar = static_cast<Character*>(TBAGame->gameObjects.at(1));
src/common/KeyFuncs.cpp:275:	//TBAGame->playerChar->isPlayer = true;
src/common/KeyFuncs.cpp:280:	//debug(TBAGame->gameObjects.size());
src/common/KeyFuncs.cpp:283:	//TBAGame->playerChar->target->receiveAttack(0,TBAGame->playerChar);
src/common/KeyFuncs.cpp:287:	decompose(TBAGame->playerChar->getLocation(),x,y);
src/common/KeyFuncs.cpp:289:	if(!TBAGame->playerChar->hasTarget()) {
src/common/KeyFuncs.cpp:290:		new Projectile(TBAGame->playerChar,{x+.2,y+.2},TBAGame->playerChar->viewAng*CONV_DEGREES,.5);
src/common/KeyFuncs.cpp:293:		decompose(TBAGame->playerChar->target->getLocation(),tx,ty);
src/common/KeyFuncs.cpp:294:		new Projectile(TBAGame->playerChar,{x,y},(-15+rand()%31)-atan2(ty-y,tx-x)*CONV_DEGREES,.5);
src/common/KeyFuncs.cpp:297:	// static_cast<Character*>(TBAGame->displayTarget)->setTarget(TBAGame->playerChar);
src/common/KeyFuncs.cpp:299:	// TBAGame->setPlayer(static_cast<Character*>(TBAGame->displayTarget));
src/common/KeyFuncs.cpp:302:	// TBAGame->gameWindow->createPopup("Cannot place building here",TBAGame->convert(5000),false);
src/common/KeyFuncs.cpp:304:	// TBAGame->playerChar->moveTo(1,1);
src/common/KeyFuncs.cpp:306:	// static_cast<Character*>(TBAGame->displayTarget)->generatePathTo(TBAGame->playerChar->location->x,-TBAGame->playerChar->location->y);
src/common/KeyFuncs.cpp:308:	TBAGame->logicTickRate /= 2;
src/common/KeyFuncs.cpp:310:	// debug(TBAGame->playerChar->limbs.at(0)->health);
src/common/KeyFuncs.cpp:312:	// TBAGame->gameWindow->popupBox->setToggledContent("Paused");
src/common/KeyFuncs.cpp:313:	// TBAGame->gameWindow->popupBox->toggled = true;
src/common/KeyFuncs.cpp:315:	/*SDL_Texture* blockTexture = TBAGame->gameWorld->getTileAt(-2,-2)->blocks.at(TBAGame->gameWorld->getTileAt(-2,-2)->blocks.size()-1)->blockTexture;
src/common/KeyFuncs.cpp:317:	SDL_SetRenderTarget(TBAGame->gameWindow->renderer,blockTexture);
src/common/KeyFuncs.cpp:319:	fChar charInfo = TBAGame->gameWindow->mapScreen->screenFont->fontMap.at(TBAGame->gameWorld->getTileAt(-2,-2)->id);
src/common/KeyFuncs.cpp:323:	SDL_RenderCopyEx(TBAGame->gameWindow->renderer,TBAGame->gameWindow->mapScreen->screenFont->fontTexture,&sRect,&dRect,45,NULL,SDL_FLIP_NONE);
src/common/KeyFuncs.cpp:325:	SDL_SetRenderTarget(TBAGame->gameWindow->renderer,NULL);
src/common/KeyFuncs.cpp:327:	//TBAGame->graphicsTickRate = (++alpha%2 == 0)? 60 : 144;
src/common/KeyFuncs.cpp:329:	/*(std::vector<Tile*> tiles = TBAGame->gameWorld->getTilesInRadius(std::round(TBAGame->playerChar->x),std::round(TBAGame->playerChar->y),5);
src/common/KeyFuncs.cpp:334:	//SDL_SetTextureAlphaMod(TBAGame->gameWindow->mapScreen->screenFont->fontTexture,--alpha);
src/common/KeyFuncs.cpp:335:	//SDL_SetTextureColorMod(TBAGame->gameWindow->mapScreen->screenFont->fontTexture,255,alpha/2,alpha);
src/defunct/Defunct.h:84:	//int dx = this->lastMapX-TBAGame->playerChar->x;
src/defunct/Defunct.h:85:	//int dy = this->lastMapY-TBAGame->playerChar->y;
src/defunct/Defunct.h:87:	int x = TBAGame->playerChar->x;
src/defunct/Defunct.h:88:	int y = TBAGame->playerChar->y;
src/defunct/Defunct.h:90:	this->map = TBAGame->gameWorld->getMapAt(this->screenCharWidth+2,x,y);
src/defunct/Defunct.h:140:			//SDL_RenderCopy(TBAGame->gameWindow->renderer,this->screenFont->fontTexture,&sRect,&dRect);
src/defunct/Defunct.h:141:			SDL_RenderCopyEx(TBAGame->gameWindow->renderer,this->screenFont->fontTexture,&sRect,&dRect,thisTile->rotation,NULL,thisTile->flip);
src/defunct/Defunct.h:154:				//SDL_RenderCopy(TBAGame->gameWindow->renderer,this->screenFont->fontTexture,&sRect,&dRect);
src/defunct/Defunct.h:155:				SDL_RenderCopyEx(TBAGame->gameWindow->renderer,this->screenFont->fontTexture,&sRect,&dRect,0,NULL,SDL_FLIP_NONE);
src/game/Behavior.cpp:96:	std::vector<Tile*> surroundingTiles = TBAGame->gameWorld->getTilesInRadius(this->x,this->y,10);
src/game/Behavior.cpp:138:	std::vector<Tile*> tileSet = TBAGame->gameWorld->getTilesInRadius(this->x,this->y,10); //placeholder until awareness stat
src/game/Behavior.cpp:157:	std::vector<Tile*> tileSet = TBAGame->gameWorld->getTilesInRadius(this->x,this->y,10); //placeholder until awareness stat
src/game/Behavior.cpp:162:			allObjs = extend(tileSet.at(i)->objects,TBAGame->convert(tileSet.at(i)->occupiers));
src/game/Behavior.cpp:189:	std::vector<Tile*> surroundingTiles = TBAGame->gameWorld->getTilesInRadius(this->x,this->y,10); //placeholder
src/game/Behavior.cpp:210:	std::vector<Tile*> surroundingTiles = TBAGame->gameWorld->getTilesInRadius(this->x,this->y,10); //placeholder
src/game/Behavior.cpp:304:	if(TBAGame->logicTicks < this->lastPathCheck+TBAGame->pathCheckInterval) return false;
src/game/Behavior.cpp:309:	Tile* targetTile = TBAGame->gameWorld->getTileAt(tx,ty);
src/game/Behavior.cpp:330:		this->lastPathCheck = TBAGame->logicTicks;
src/game/Behavior.cpp:342:				if(contains(previousBests,TBAGame->gameWorld->getTileAt(tileX+j,tileY+i))) continue;
src/game/Behavior.cpp:343:				if(!TBAGame->gameWorld->getTileAt(tileX+j,tileY+i)->isPassable()) continue;
src/game/Behavior.cpp:352:						currentBestTile = TBAGame->gameWorld->getTileAt(tileX+j,tileY+i);
src/game/Behavior.cpp:379:	this->lastPathCheck = TBAGame->logicTicks;
src/game/Behavior.cpp:473:	// TBAGame->gameLog->write_nts("2");
src/game/Behavior.cpp:475:		// TBAGame->gameLog->write_nts("2");
src/game/Behavior.cpp:477:			// TBAGame->gameLog->write_nts("2");
src/game/Behavior.cpp:483:	// TBAGame->gameLog->write_nts("2");
src/game/Behavior.cpp:553:	this->lastAttack = TBAGame->logicTicks;
src/game/Behavior.cpp:559:	if(TBAGame->logicTicks >= this->lastAttack + this->attackRate + this->defaultAttackSpeed) {
src/game/Behavior.cpp:561:	} else if(TBAGame->logicTicks >= this->lastAttack + this->attackRate) {
src/game/Behavior.cpp:618:	this->lastAttack = TBAGame->logicTicks;
src/game/Behavior.cpp:675:		TBAGame->displayText("\nReceived "+std::to_string(damage)+" damage from "+attacker->getName());
src/game/Behavior.cpp:682:		TBAGame->displayText("\nDealt "+std::to_string(damage)+" damage to "+this->getName());
src/game/Behavior.cpp:691:		if(static_cast<Character*>(attacker)->isPlayer) TBAGame->displayText("\nKilled "+this->getName());
src/game/Behavior.cpp:718:	new FloatingText(3,TBAGame->gameWindow->textScreen->prepareCommandForDisplay(message),this->getApproximateLocation(),this);
src/game/Behavior.cpp:727:	// pthread_mutex_lock(&TBAGame->updateLock);
src/game/Behavior.cpp:729:	// TBAGame->gameLog->write_nts("1");
src/game/Behavior.cpp:787:	// pthread_mutex_unlock(&TBAGame->updateLock);
src/game/Block.cpp:11:		this->blockTexture = SDL_CreateTexture(TBAGame->gameWindow->renderer,
src/game/Block.cpp:12:                               SDL_GetWindowPixelFormat(TBAGame->gameWindow->window),
src/game/Block.cpp:14:                               TBAGame->gameWindow->mapScreen->charW,
src/game/Block.cpp:15:                               TBAGame->gameWindow->mapScreen->charH);
src/game/Block.cpp:17:		fChar charInfo = TBAGame->gameWindow->mapScreen->screenFont->fontMap.at(this->id);
src/game/Block.cpp:21:		SDL_SetRenderTarget(TBAGame->gameWindow->renderer,this->blockTexture);
src/game/Block.cpp:23:		SDL_RenderCopyEx(TBAGame->gameWindow->renderer,TBAGame->gameWindow->mapScreen->screenFont->fontTexture,&sRect,NULL,0,NULL,SDL_FLIP_NONE);
src/game/Block.cpp:25:		SDL_SetRenderTarget(TBAGame->gameWindow->renderer,NULL);
src/game/Character.cpp:21:	this->location = TBAGame->gameWorld->getTileAt(_x,_y);
src/game/Character.cpp:34:		TBAGame->playerChar = this;
src/game/Character.cpp:59:	if(newX+this->width >= TBAGame->gameWorld->size) {
src/game/Character.cpp:62:	if(newY+this->width >= TBAGame->gameWorld->size) {
src/game/Character.cpp:66:	bool YP = TBAGame->gameWorld->getTileAt(this->x,newY+this->width)->isPassable();
src/game/Character.cpp:67:	bool YN = TBAGame->gameWorld->getTileAt(this->x,newY-this->width)->isPassable();
src/game/Character.cpp:68:	bool XP = TBAGame->gameWorld->getTileAt(newX+this->width,this->y)->isPassable();
src/game/Character.cpp:69:	bool XN = TBAGame->gameWorld->getTileAt(newX-this->width,this->y)->isPassable();
src/game/Character.cpp:88:	this->location = TBAGame->gameWorld->getTileAt(newX,newY);
src/game/Character.cpp:94:	float newX = this->x+(std::cos(this->viewAng*CONV_DEGREES)*((float)this->velocity*(TBAGame->logicTicks - this->lastMove)*TBAGame->moveSpeedUnit));
src/game/Character.cpp:95:	float newY = this->y+(std::sin(this->viewAng*CONV_DEGREES)*((float)this->velocity*(TBAGame->logicTicks - this->lastMove)*TBAGame->moveSpeedUnit));
src/game/Character.cpp:117:	this->lastMove = TBAGame->logicTicks;
src/game/Character.cpp:227:	float x = TBAGame->gameWindow->mapScreen->x+(TBAGame->gameWindow->mapScreen->w/2)-(TBAGame->gameWindow->mapScreen->charW*(TBAGame->playerChar->location->x - this->location->x));
src/game/Character.cpp:228:	float y = TBAGame->gameWindow->mapScreen->y+(TBAGame->gameWindow->mapScreen->h/2)-(TBAGame->gameWindow->mapScreen->charH*(TBAGame->playerChar->location->y + this->location->y));
src/game/Character.cpp:236:	float x = TBAGame->gameWindow->mapScreen->x+(TBAGame->gameWindow->mapScreen->w/2)-(TBAGame->gameWindow->mapScreen->charW*(TBAGame->playerChar->x - this->x));
src/game/Character.cpp:237:	float y = TBAGame->gameWindow->mapScreen->y+(TBAGame->gameWindow->mapScreen->h/2)-(TBAGame->gameWindow->mapScreen->charH*(TBAGame->playerChar->y - this->y));
src/game/Character.cpp:305:	TBAGame->removeObject(this);
src/game/CommandFuncs.cpp:20:	for(int i=0;i<TBAGame->commandList.size();i++) {
src/game/CommandFuncs.cpp:21:		if(helpMap.find(TBAGame->commandList.at(i)->aliases.at(0)) == helpMap.end()) {
src/game/CommandFuncs.cpp:22:			std::cout << "WARNING No help entry for command: "+TBAGame->commandList.at(i)->aliases.at(0) << std::endl;
src/game/CommandFuncs.cpp:55:	TBAGame->gameWindow->textScreen->content.clear();
src/game/CommandFuncs.cpp:61:	return "\n"+TBAGame->playerChar->getInvString();
src/game/CommandFuncs.cpp:67:	TBAGame->playerChar->targetAng = (float)dirMap.at(args.at(0)).second;
src/game/CommandFuncs.cpp:68:	TBAGame->playerChar->autoMove = true;
src/game/CommandFuncs.cpp:69:	TBAGame->playerChar->addStatus(STATUS_TRAVEL);
src/game/CommandFuncs.cpp:87:	TBAGame->togglePause();
src/game/CommandFuncs.cpp:88:	return (TBAGame->paused)? "\nPaused" : "\nUnpaused";
src/game/CommandFuncs.cpp:94:	if(TBAGame->paused) {
src/game/CommandFuncs.cpp:95:		TBAGame->togglePause();
src/game/CommandFuncs.cpp:104:	// TBAGame->playerChar->direction = {0,0};
src/game/CommandFuncs.cpp:105:	TBAGame->playerChar->autoMove = false;
src/game/CommandFuncs.cpp:113:		return "\n==========================\nFor more information type:\n->help <command>\n==========================\n"+join('\n',TBAGame->commandStrings);
src/game/CommandFuncs.cpp:117:		return newline+TBAGame->colorKey+"bUsage"+TBAGame->colorKey+": "+join(newline+"       ",helpMap.at(cmd).first)+newline+newline+TBAGame->colorKey+"bFunction"+TBAGame->colorKey+": "+join(newline+"          ",helpMap.at(cmd).second);
src/game/CommandFuncs.cpp:124:		if(!contains(TBAGame->commandStrings,args.at(0))) {
src/game/CommandFuncs.cpp:137:		// if(!TBAGame->playerChar->getNearestTarget()) return "\nNo valid targets found";
src/game/CommandFuncs.cpp:138:		// return "\n"+TBAGame->playerChar->getName()+" targets "+TBAGame->playerChar->getTargetName();
src/game/CommandFuncs.cpp:139:		TBAGame->playerChar->setTarget(nullptr);
src/game/CommandFuncs.cpp:144:	//TBAGame->playerChar->setTarget(TBAGame->findObject(command->aux));	
src/game/CommandFuncs.cpp:145:	TBAGame->playerChar->findTargetInRadius(command->aux);
src/game/CommandFuncs.cpp:146:	return "\n"+TBAGame->playerChar->getName()+" targets "+TBAGame->playerChar->getTargetName();
src/game/CommandFuncs.cpp:155:	if(!TBAGame->playerChar->findTargetInRadius(targetName)) {
src/game/CommandFuncs.cpp:167:	if(!TBAGame->playerChar->hasTarget()) return "\nNo target";
src/game/CommandFuncs.cpp:168:	TBAGame->playerChar->setStatus(STATUS_COMBAT);
src/game/CommandFuncs.cpp:169:	return "\nAttacking "+TBAGame->playerChar->getTargetName();
src/game/CommandFuncs.cpp:175:		Character* newTarget = static_cast<Character*>(TBAGame->findObject(targetName));
src/game/CommandFuncs.cpp:180:		TBAGame->playerChar->setTarget(newTarget);
src/game/CommandFuncs.cpp:189:		TBAGame->gameWindow->mapScreen->zoom /= 2;
src/game/CommandFuncs.cpp:191:		TBAGame->gameWindow->mapScreen->zoom *= 2;
src/game/CommandFuncs.cpp:193:		TBAGame->gameWindow->mapScreen->zoom = 1;
src/game/CommandFuncs.cpp:194:		TBAGame->gameWindow->mapScreen->generateMapTiles();
src/game/CommandFuncs.cpp:197:	TBAGame->gameWindow->mapScreen->generateMapTiles();
src/game/CommandFuncs.cpp:215:	TBAGame->playerChar->say(join(' ',args));
src/game/CommandFuncs.cpp:234:	for(int i=0;i<TBAGame->playerChar->limbs.size();i++) {
src/game/CommandFuncs.cpp:235:		TBAGame->playerChar->limbs.at(i)->applyDamage(damage);
src/game/CommandFuncs.cpp:245:	TBAGame->gameRunning = false;
src/game/CommandFuncs.cpp:259:	if(!TBAGame->hasDisplayTarget()) {
src/game/CommandFuncs.cpp:263:	if(TBAGame->displayTarget->type != OBJ_CONTAINER and TBAGame->displayTarget->type != OBJ_CHARACTER) {
src/game/CommandFuncs.cpp:264:		command->error = "Cannot take item from "+TBAGame->displayTarget->getName();
src/game/CommandFuncs.cpp:273:		if(TBAGame->hasDisplayTarget()) {
src/game/CommandFuncs.cpp:274:			std::string name = TBAGame->displayTarget->getName();
src/game/CommandFuncs.cpp:275:			TBAGame->clearDisplayTarget();
src/game/CommandFuncs.cpp:281:	GameObject *newDisplayTarget = TBAGame->playerChar->findObjectInRadius(objName);
src/game/CommandFuncs.cpp:285:		TBAGame->setDisplayTarget(newDisplayTarget);
src/game/CommandFuncs.cpp:303:	if(!TBAGame->hasDisplayTarget()) {
src/game/CommandFuncs.cpp:307:	if(!TBAGame->displayTarget->hasInventory()) {
src/game/CommandFuncs.cpp:308:		command->error = "Cannot put item in "+TBAGame->displayTarget->getName();
src/game/CommandFuncs.cpp:318:		std::vector<GameObject*> containers = TBAGame->playerChar->getObjectsInRadius(OBJ_CONTAINER);
src/game/CommandFuncs.cpp:321:				TBAGame->displayText("\nSearching "+containers.at(i)->getName()+"...");
src/game/CommandFuncs.cpp:327:		if(TBAGame->displayTarget->hasInventory()) {
src/game/CommandFuncs.cpp:328:			TBAGame->displayText("\nSearching "+TBAGame->displayTarget->getName()+"...");
src/game/CommandFuncs.cpp:329:			return TBAGame->displayTarget->getInvString();
src/game/CommandFuncs.cpp:337:	if(!TBAGame->hasDisplayTarget() and args.size() == 0) {
src/game/CommandFuncs.cpp:347:	int index = TBAGame->playerChar->inventory->find(itemName);
src/game/CommandFuncs.cpp:349:		Item *goodItem = TBAGame->playerChar->inventory->getItem(index);
src/game/CommandFuncs.cpp:350:		if(TBAGame->playerChar->equip(goodItem)) {
src/game/CommandFuncs.cpp:351:			TBAGame->playerChar->resetCombatTimer();
src/game/CommandFuncs.cpp:378:		std::string surface = "\nStanding on "+TBAGame->playerChar->location->getName();
src/game/CommandFuncs.cpp:379:		std::vector<Character*> nearbyChars = TBAGame->playerChar->getCharactersInRadius();
src/game/CommandFuncs.cpp:380:		std::vector<GameObject*> nearbyObjs = TBAGame->playerChar->getObjectsInRadius(OBJ_GENERIC);
src/game/CommandFuncs.cpp:391:		int index = TBAGame->playerChar->inventory->find(join(' ',args));
src/game/CommandFuncs.cpp:393:			return "\n"+TBAGame->playerChar->inventory->getItem(index)->getInfo();
src/game/CommandFuncs.cpp:409:	int index = TBAGame->playerChar->inventory->find(itemName);
src/game/CommandFuncs.cpp:411:		Item *goodItem = TBAGame->playerChar->inventory->getItem(index);
src/game/CommandFuncs.cpp:412:		if(TBAGame->playerChar->plant(goodItem)) {
src/game/CommandFuncs.cpp:432:	int index = TBAGame->playerChar->inventory->find(itemName);
src/game/CommandFuncs.cpp:434:		Item *goodItem = TBAGame->playerChar->inventory->getItem(index);
src/game/CommandFuncs.cpp:435:		if(TBAGame->playerChar->consume(goodItem)) {
src/game/CommandFuncs.cpp:455:	int index = TBAGame->playerChar->inventory->find(itemName);
src/game/CommandFuncs.cpp:457:		Item *goodItem = TBAGame->playerChar->inventory->getItem(index);
src/game/CommandFuncs.cpp:458:		if(TBAGame->playerChar->consume(goodItem)) {
src/game/CommandFuncs.cpp:479:	TBAGame->playerChar->inventory->add(newItem);
src/game/CommandFuncs.cpp:480:	return "\nGave "+TBAGame->playerChar->getName()+" "+newItem->getFormattedName();
src/game/CommandFuncs.cpp:496:		std::vector<GameObject*> nodes = TBAGame->playerChar->getObjectsInRadius(OBJ_INTERACTIVE);
src/game/CommandFuncs.cpp:500:						if(TBAGame->playerChar->work(nodes.at(i))) {
src/game/CommandFuncs.cpp:508:		if(TBAGame->playerChar->work(TBAGame->displayTarget)) {
src/game/CommandFuncs.cpp:509:			return "\nWorking "+TBAGame->displayTarget->getFormattedName();
src/game/CommandFuncs.cpp:517:	if(!TBAGame->hasDisplayTarget() and args.size() == 0) {
src/game/CommandUtils.h:63:	std::vector<GameObject*> containers = TBAGame->playerChar->getObjectsInRadius(OBJ_CONTAINER);
src/game/CommandUtils.h:129:		targetName = TBAGame->displayTarget->getFormattedName();
src/game/CommandUtils.h:134:		source = TBAGame->displayTarget->getInventory();
src/game/CommandUtils.h:135:		// sourceName = TBAGame->displayTarget->getFormattedName();
src/game/CommandUtils.h:136:		destination = TBAGame->playerChar->inventory;
src/game/CommandUtils.h:138:		sourceName = TBAGame->displayTarget->getFormattedName();
src/game/CommandUtils.h:143:		targetName = TBAGame->displayTarget->getFormattedName();
src/game/CommandUtils.h:147:		source = TBAGame->playerChar->inventory;
src/game/CommandUtils.h:148:		destination = TBAGame->displayTarget->getInventory();
src/game/CommandUtils.h:150:		if(TBAGame->displayTarget->type == OBJ_CHARACTER) {
src/game/CommandUtils.h:158:		sourceName = TBAGame->playerChar->getFormattedName();
src/game/Container.cpp:13:	this->location = TBAGame->gameWorld->getTileAt(this->x,this->y);
src/game/Container.cpp:20:	this->location = TBAGame->gameWorld->getTileAt(this->x,this->y);
src/game/Container.cpp:28:	this->location = TBAGame->gameWorld->getTileAt(this->x,this->y);
src/game/Container.h:36:			TBAGame->removeObject(this);
src/game/FloatingText.cpp:22:	int x = std::get<0>(this->location) - (TBAGame->gameWindow->textScreen->charW/TBAGame->gameWindow->mapScreen->zoom*this->message.at(0).size()/2);
src/game/FloatingText.cpp:23:	int y = std::get<1>(this->location) - (TBAGame->gameWindow->textScreen->charH/TBAGame->gameWindow->mapScreen->zoom*this->message.size()/2);
src/game/FloatingText.cpp:34:			if(TBAGame->gameWindow->textScreen->screenFont->fontMap.find(charIndex) == TBAGame->gameWindow->textScreen->screenFont->fontMap.end()) {
src/game/FloatingText.cpp:39:			charInfo = TBAGame->gameWindow->textScreen->screenFont->fontMap.at(charIndex);
src/game/FloatingText.cpp:45:			SDL_Rect dRect = {x+(1*cursor[0])+this->offsetX,(TBAGame->gameWindow->textScreen->charH*cursor[1])+y+charInfo.yo-this->offsetY-this->dialogOffset,sRect.w,sRect.h};
src/game/FloatingText.cpp:47:			//SDL_RenderDrawRect(TBAGame->gameWindow->renderer,&dRect);
src/game/FloatingText.cpp:48:			SDL_RenderCopy(TBAGame->gameWindow->renderer,TBAGame->gameWindow->textScreen->screenFont->fontTexture,&sRect,&dRect);
src/game/FloatingText.cpp:63:		TBAGame->removeUIObject(this);
src/game/FloatingText.cpp:70:	//if(std::abs(this->defaultX) > std::abs(TBAGame->playerChar->x)+TBAGame->gameWindow->mapScreen->screenCharWidth or std::abs(this->defaultY) > std::abs(TBAGame->playerChar->y)+TBAGame->gameWindow->mapScreen->screenCharHeight) {
src/game/FloatingText.cpp:72:			TBAGame->removeUIObject(this);
src/game/FloatingText.cpp:79:	this->completion = (TBAGame->logicTicks-this->created)/(this->duration*(float)TBAGame->convert(1000.0));
src/game/FloatingText.cpp:89:			TBAGame->gameWindow->mapScreen->x+(TBAGame->gameWindow->mapScreen->w/2)-(TBAGame->gameWindow->mapScreen->charW*(TBAGame->playerChar->x - this->defaultX)),
src/game/FloatingText.cpp:90:			TBAGame->gameWindow->mapScreen->y+(TBAGame->gameWindow->mapScreen->h/2)-(TBAGame->gameWindow->mapScreen->charH*(TBAGame->playerChar->y - this->defaultY))
src/game/FloatingText.cpp:93:	SDL_SetTextureColorMod(TBAGame->gameWindow->textScreen->screenFont->fontTexture,this->color.r,this->color.g,this->color.b);
src/game/FloatingText.cpp:95:	SDL_SetTextureColorMod(TBAGame->gameWindow->textScreen->screenFont->fontTexture,180,180,180);
src/game/FloatingText.h:40:		this->created = TBAGame->logicTicks;
src/game/FloatingText.h:50:		this->created = TBAGame->logicTicks;
src/game/FloatingText.h:55:		return TBAGame->logicTicks >= this->created + (TBAGame->convert(this->duration*1000));
src/game/GameObject.cpp:13:	this->objectID = ++TBAGame->objectTotal;
src/game/GameObject.cpp:19:			TBAGame->gameObjects.push_back(this);
src/game/GameObject.cpp:22:			TBAGame->gameObjects.push_back(this);
src/game/GameObject.cpp:29:			TBAGame->gameUIObjects.push_back(this);
src/game/Input.cpp:37:	for(int i=0;i<TBAGame->commandList.size();i++) {
src/game/Input.cpp:40:		testCommand = TBAGame->commandList.at(i);
src/game/Item.cpp:72:	this->created = TBAGame->logicTicks;
src/game/Item.cpp:83:			float duration = TBAGame->convert(effectValues.at(2)*1000);
src/game/Item.cpp:145:	return TBAGame->colorKey+("w"+this->name)+TBAGame->colorKey;//TBAGame->colorKey;
src/game/Projectile.cpp:17:	this->location = TBAGame->gameWorld->getTileAt(this->x,this->y);
src/game/Projectile.cpp:20:	this->lastUpdate = TBAGame->logicTicks;
src/game/Projectile.cpp:21:	this->destroyTime = TBAGame->logicTicks + this->maxAge;
src/game/Projectile.cpp:34:	if((char*)TBAGame->gameWorld->getTileAt(this->x,this->y) != (char*)this->location) {
src/game/Projectile.cpp:36:		this->location = TBAGame->gameWorld->getTileAt(this->x,this->y);
src/game/Projectile.cpp:40:	this->lastUpdate = TBAGame->logicTicks;
src/game/Projectile.cpp:42:	if(TBAGame->logicTicks >= this->destroyTime) {
src/game/Projectile.cpp:53:	Tile* thisTile = TBAGame->gameWorld->getTileAt(testX,testY);
src/game/Projectile.cpp:57:	for(int j=0;j<TBAGame->logicTicks-this->lastUpdate;j++) {
src/game/Projectile.cpp:92:		thisTile = TBAGame->gameWorld->getTileAt(testX,testY);
src/game/Projectile.cpp:105:	TBAGame->removeObject(this);
src/game/Projectile.h:17:		int maxAge = TBAGame->convert(30000);	//Projectiles decay after 1 minute
src/game/ResourceNode.h:49:	ResourceNode(const std::string &_name,std::tuple<float,float> loc,int itemID,int _did, int time): name(_name), resourceID(itemID), duration(TBAGame->convert(time)), displayID(_did), GameObject(OBJ_INTERACTIVE) {
src/game/ResourceNode.h:52:		this->location = TBAGame->gameWorld->getTileAt(this->x,this->y);
src/game/ResourceNode.h:60:			TBAGame->removeObject(this);
src/game/StatusEffect.cpp:17:	float perc = (this->remaining*(1000/TBAGame->logicTickRate));
src/Main.cpp:12:		TBAGame->debugMode = true;
src/Main.cpp:21:	TBAGame->setupUI();
src/Main.cpp:24:	TBAGame->setupGame();
src/Main.cpp:27:	//TBAGame->canUpdateLogic = false;
src/Main.cpp:28:	//TBAGame->canUpdateGraphics = true;
src/Main.cpp:31:	TBAGame->spawn_threads();
src/Main.cpp:34:	// pthread_cond_signal(&TBAGame->graphics);
src/Main.cpp:36:	TBAGame->gameLog->writeln("Entering game loop");
src/Main.cpp:37:	while(TBAGame->gameRunning) {
src/Main.cpp:38:		TBAGame->input();
src/Main.cpp:39:		TBAGame->update();
src/tools/Utility.cpp:38:		if(s[i] >= 0 or s[i] == TBAGame->colorKey) {
src/tools/Utility.cpp:50:		if(s[i] != TBAGame->colorKey) {
src/tools/Utility.cpp:128:		TBAGame->displayText("\n"+matchlist+"\r");
src/tools/Utility.cpp:166:		TBAGame->displayText("\n"+matchlist+"\r");
src/ui/Screen.cpp:125:	this->screenFont->generateFontTexture(TBAGame->gameWindow->window,TBAGame->gameWindow->renderer);
src/ui/Screen.cpp:158:	this->screenTexture = SDL_CreateTexture(TBAGame->gameWindow->renderer,
src/ui/Screen.cpp:159:	   SDL_GetWindowPixelFormat(TBAGame->gameWindow->window),
src/ui/Screen.cpp:174:		SDL_SetRenderTarget(TBAGame->gameWindow->renderer,this->screenTexture);
src/ui/Screen.cpp:175:		SDL_RenderClear(TBAGame->gameWindow->renderer);
src/ui/Screen.cpp:180:		SDL_SetRenderDrawColor(TBAGame->gameWindow->renderer,bgColor.r,bgColor.g,bgColor.b,bgColor.a);
src/ui/Screen.cpp:181:		SDL_RenderFillRect(TBAGame->gameWindow->renderer,&bdRect);
src/ui/Screen.cpp:184:		SDL_SetRenderDrawColor(TBAGame->gameWindow->renderer,bdColor.r,bdColor.g,bdColor.b,bdColor.a);
src/ui/Screen.cpp:189:			SDL_RenderDrawRect(TBAGame->gameWindow->renderer,&tRect);
src/ui/Screen.cpp:192:		SDL_SetRenderTarget(TBAGame->gameWindow->renderer,NULL);
src/ui/Screen.cpp:195:	SDL_SetRenderDrawColor(TBAGame->gameWindow->renderer,bgColor.r,bgColor.g,bgColor.b,bgColor.a);
src/ui/Screen.cpp:200:	SDL_SetRenderTarget(TBAGame->gameWindow->renderer,this->screenTexture);
src/ui/Screen.cpp:201:	//SDL_RenderClear(TBAGame->gameWindow->renderer);
src/ui/Screen.cpp:211:	SDL_SetRenderDrawColor(TBAGame->gameWindow->renderer,255,255,255,255);
src/ui/Screen.cpp:251:			if((char)charIndex == TBAGame->colorKey) {
src/ui/Screen.cpp:303:			//SDL_RenderDrawRect(TBAGame->gameWindow->renderer,&dRect);
src/ui/Screen.cpp:304:			SDL_RenderCopy(TBAGame->gameWindow->renderer,this->screenFont->fontTexture,&sRect,&dRect);
src/ui/Screen.cpp:315:	SDL_SetRenderTarget(TBAGame->gameWindow->renderer,NULL);
src/ui/Screen.cpp:324:	SDL_RenderCopy(TBAGame->gameWindow->renderer,this->screenTexture,NULL,&dRect);
src/ui/Screen.cpp:341:		//this->setContent("Inventory:"+TBAGame->playerChar->inventory->toString()+"\n\nGraphics Ticks: "+std::to_string(TBAGame->graphicsTicks)+"\nLogic Ticks: "+std::to_string(TBAGame->logicTicks)+"\nPlayer location: "+std::to_string((int)std::round(TBAGame->playerChar->x))+","+std::to_string((int)std::round(TBAGame->playerChar->y))+"\nPlayer velocity: "+std::to_string((int)std::max(std::abs(std::round(TBAGame->playerChar->velocityX)),std::abs(std::round(TBAGame->playerChar->velocityY))))+" MPH");	
src/ui/Screen.cpp:343:		//this->setContent("Inventory:"+TBAGame->playerChar->inventory->contentString+"\n\nPlayer info:\n\t"+TBAGame->playerChar->getInfo()+"\n\nTarget info:\n\t"+TBAGame->playerChar->getTargetInfo());
src/ui/Screen.cpp:365:		// this->stopTick = TBAGame->logicTicks+duration;
src/ui/Screen.cpp:372:	// if(this->enabled and TBAGame->logicTicks >= this->stopTick) {
src/ui/Screen.cpp:381:			// this->duration = TBAGame->logicTicks+std::get<1>(this->messageQueue.at(0));
src/ui/Screen.cpp:395:	int windowOffsetX = 5+((TBAGame->gameWorld->size/2)+TBAGame->playerChar->x)*this->charW;
src/ui/Screen.cpp:396:	int windowOffsetY = 5+((TBAGame->gameWorld->size/2)+TBAGame->playerChar->y)*this->charH;
src/ui/Screen.cpp:400:	SDL_RenderCopy(TBAGame->gameWindow->renderer,TBAGame->gameWorld->worldTexture,&srect,&this->mapTextureRect);
src/ui/Screen.cpp:414:		//SDL_SetRenderDrawColor(TBAGame->gameWindow->renderer,bgColor.r,bgColor.g,bgColor.b,bgColor.a);
src/ui/Screen.cpp:415:		//SDL_RenderFillRect(TBAGame->gameWindow->renderer,&bdRect);
src/ui/Screen.cpp:416:		//SDL_RenderCopy(TBAGame->gameWindow->renderer,this->screenFont->fontTexture,NULL,&bdRect);
src/ui/Screen.cpp:419:		SDL_SetRenderDrawColor(TBAGame->gameWindow->renderer,bdColor.r,bdColor.g,bdColor.b,bdColor.a);
src/ui/Screen.cpp:424:			SDL_RenderDrawRect(TBAGame->gameWindow->renderer,&tRect);
src/ui/Screen.cpp:441:	SDL_Colour bgColor = TBAGame->gameWindow->bgColor;
src/ui/Screen.cpp:443:	SDL_SetRenderDrawColor(TBAGame->gameWindow->renderer,bgColor.r,bgColor.g,bgColor.b,bgColor.a);
src/ui/Screen.cpp:447:		SDL_RenderFillRect(TBAGame->gameWindow->renderer,&rect);
src/ui/ScreenUtils.cpp:98:				//	if(s[i] == '') TBAGame->gameRunning = false;
src/ui/ScreenUtils.cpp:153:	int centerX = TBAGame->playerChar->x;
src/ui/ScreenUtils.cpp:154:	int centerY = TBAGame->playerChar->y;
src/ui/ScreenUtils.cpp:156:	this->map = TBAGame->gameWorld->getMapAt((this->w/this->charW)+2,centerX,centerY);
src/ui/ScreenUtils.cpp:163:	SDL_SetRenderTarget(TBAGame->gameWindow->renderer,TBAGame->gameWorld->worldTexture);
src/ui/ScreenUtils.cpp:222:						int windowOffsetX = ((TBAGame->gameWorld->size/2)+thisTile->x)*this->charW;
src/ui/ScreenUtils.cpp:223:						int windowOffsetY = ((TBAGame->gameWorld->size/2)-thisTile->y)*this->charH;
src/ui/ScreenUtils.cpp:229:						SDL_RenderCopyEx(TBAGame->gameWindow->renderer,this->screenFont->fontTexture,&sRect,&dRect,thisTile->getRotation(),NULL,thisTile->getFlip());
src/ui/ScreenUtils.cpp:250:	int centerX = TBAGame->playerChar->x;
src/ui/ScreenUtils.cpp:251:	int centerY = TBAGame->playerChar->y;
src/ui/ScreenUtils.cpp:258:	SDL_SetRenderTarget(TBAGame->gameWindow->renderer,TBAGame->gameWorld->worldTexture);
src/ui/ScreenUtils.cpp:260:	///SDL_RenderClear(TBAGame->gameWindow->renderer);
src/ui/ScreenUtils.cpp:309:				int windowOffsetX = ((TBAGame->gameWorld->size/2)+thisTile->x)*this->charW;
src/ui/ScreenUtils.cpp:310:				int windowOffsetY = ((TBAGame->gameWorld->size/2)-thisTile->y)*this->charH;
src/ui/ScreenUtils.cpp:316:					SDL_RenderCopyEx(TBAGame->gameWindow->renderer,thisTile->getBlockTexture(),NULL,&dRect,thisTile->getRotation(),NULL,thisTile->getFlip());
src/ui/ScreenUtils.cpp:318:					SDL_RenderCopyEx(TBAGame->gameWindow->renderer,this->screenFont->fontTexture,&sRect,&dRect,thisTile->getRotation(),NULL,thisTile->getFlip());
src/ui/ScreenUtils.cpp:328:					SDL_RenderCopy(TBAGame->gameWindow->renderer,this->screenFont->fontTexture,&sRect,&dRect);
src/ui/ScreenUtils.cpp:338:					charInfo = TBAGame->gameWindow->textScreen->screenFont->fontMap.at((int)occupant->getName()[0]);
src/ui/ScreenUtils.cpp:340:					int windowOffsetX = 5+((TBAGame->gameWorld->size/2)+occupant->x)*this->charW;
src/ui/ScreenUtils.cpp:341:					int windowOffsetY = 5+((TBAGame->gameWorld->size/2)+occupant->y)*this->charH;
src/ui/ScreenUtils.cpp:346:					SDL_RenderCopy(TBAGame->gameWindow->renderer,TBAGame->gameWindow->textScreen->screenFont->fontTexture,&sRect,&dRect);
src/ui/ScreenUtils.cpp:348:					SDL_RenderDrawLine(TBAGame->gameWindow->renderer,windowOffsetX+2.5,windowOffsetY+2.5,windowOffsetX+2.5+std::cos(occupant->viewAng*CONV_DEGREES)*10,windowOffsetY+2.5+std::sin(occupant->viewAng*CONV_DEGREES)*10);
src/ui/ScreenUtils.cpp:359:					int windowOffsetX = ((TBAGame->gameWorld->size/2)+objX)*this->charW;
src/ui/ScreenUtils.cpp:360:					int windowOffsetY = ((TBAGame->gameWorld->size/2)+objY)*this->charH;
src/ui/ScreenUtils.cpp:370:							SDL_RenderCopyEx(TBAGame->gameWindow->renderer,this->screenFont->fontTexture,&sRect,&dRect,static_cast<Projectile*>(generic)->angle*CONV_RADIANS,NULL,SDL_FLIP_NONE);
src/ui/ScreenUtils.cpp:375:							SDL_RenderCopy(TBAGame->gameWindow->renderer,this->screenFont->fontTexture,&sRect,&dRect);
src/ui/ScreenUtils.cpp:380:							SDL_RenderCopy(TBAGame->gameWindow->renderer,this->screenFont->fontTexture,&sRect,&dRect);
src/ui/ScreenUtils.cpp:396:	SDL_SetRenderTarget(TBAGame->gameWindow->renderer,NULL);
src/ui/ScreenUtils.cpp:421:		// TBAGame->playerChar->getName()+":"+TBAGame->playerChar->inventory->toString();
src/ui/ScreenUtils.cpp:424:		/*if(TBAGame->playerChar->hasTarget()) {
src/ui/ScreenUtils.cpp:425:			newContent += TBAGame->playerChar->getTargetInfo();
src/ui/ScreenUtils.cpp:429:		if(TBAGame->hasDisplayTarget()) {
src/ui/ScreenUtils.cpp:430:            newContent += TBAGame->displayTarget->getInfo();
src/ui/ScreenUtils.cpp:431:			if((char*)TBAGame->displayTarget == (char*)TBAGame->playerChar) {
src/ui/ScreenUtils.cpp:432:				newContent += "\n\n"+TBAGame->playerChar->getInvString();
src/ui/ScreenUtils.cpp:433:				newContent += "\n\n"+TBAGame->playerChar->getEquipString();
src/ui/Window.cpp:101:	TBAGame->updateGameUIObjects();
src/ui/Window.cpp:120:	//TBAGame->updateGameUIObjects();
